// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Action {
  id          String        @id @default(cuid())
  serverid    String
  commandname String
  Transaction Transaction[] @relation("ActionOnTransaction")

  @@unique([serverid, commandname])
}

model User {
  id                  String         @id @default(uuid())
  discordid           String         @unique
  Game                Game[]         @relation("UserOnGame")
  Rep                 Rep[]          @relation("UserOnRep")
  SenderTransaction   Transaction[]  @relation("SendUserOnTransaction")
  ReceiverTransaction Transaction[]  @relation("ReceiveUserOnTransaction")
  Tags                Tags[]         @relation("UserOnTag")
  Bot                 Bot[]          @relation("UserOnBot")
  SessionTable        SessionTable[] @relation("UserOnSession")
}

model Bot {
  serverid  String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  config    Json
  ownerid   String
  owner     User     @relation("UserOnBot", fields: [ownerid], references: [id])
}

model Game {
  userid   String
  user     User   @relation("UserOnGame", fields: [userid], references: [id])
  gamename String

  @@id([userid, gamename])
}

model Rep {
  userid     String
  user       User      @relation("UserOnRep", fields: [userid], references: [id])
  rep        Int
  serverid   String
  locked     Boolean   @default(false)
  unlocktime DateTime?

  @@id([userid, serverid])
  @@unique([userid, serverid])
}

model Transaction {
  id         String      @id @default(uuid())
  serverid   String
  senderid   String
  sender     User        @relation("SendUserOnTransaction", fields: [senderid], references: [id])
  receiverid String?
  receiver   User?       @relation("ReceiveUserOnTransaction", fields: [receiverid], references: [id])
  actionid   String
  action     Action      @relation("ActionOnTransaction", fields: [actionid], references: [id])
  time       DateTime    @default(now())
  Parameter  Parameter[] @relation("TransactionOnParameter")
}

model Parameter {
  transactionid  String
  transaction    Transaction @relation("TransactionOnParameter", fields: [transactionid], references: [id])
  parametername  String
  parametervalue String

  @@id([transactionid, parametername])
}

model Tags {
  userid   String
  user     User   @relation("UserOnTag", fields: [userid], references: [id])
  tagname  String
  tagvalue String

  @@id([userid, tagname])
}

model SessionTable {
  id         String @id @default(uuid())
  userid     String
  User       User   @relation("UserOnSession", fields: [userid], references: [id])
  token      String
  expiration String
  ip         String
}
