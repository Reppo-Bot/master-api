// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Action {
  id          String        @id @default(cuid())
  serverid    String
  commandname String
  Transaction Transaction[] @relation("ActionOnTransaction")

  TransactionArchive TransactionArchive[] @relation("ActionOnTransactionArchive")
  @@unique([serverid, commandname])
}

model User {
  id                         String               @id @default(uuid())
  discordid                  String               @unique
  name                       String?
  avatar                     String?
  Game                       Game[]               @relation("UserOnGame")
  Rep                        Rep[]                @relation("UserOnRep")
  SenderTransaction          Transaction[]        @relation("SendUserOnTransaction")
  ReceiverTransaction        Transaction[]        @relation("ReceiveUserOnTransaction")
  SenderTransactionArchive   TransactionArchive[] @relation("SendUserOnTransactionArchive")
  ReceiverTransactionArchive TransactionArchive[] @relation("ReceiveUserOnTransactionArchive")
  Tags                       Tags[]               @relation("UserOnTag")
  Bot                        Bot[]                @relation("UserOnBot")
  Session                    Session[]            @relation("UserOnSession")
  SessionArchive             SessionArchive[]     @relation("UserOnSessionArchive")
}

model Bot {
  serverid           String               @id
  servername         String               @default("")
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now())
  config             Json
  ownerid            String
  owner              User                 @relation("UserOnBot", fields: [ownerid], references: [id])
  serveravatar       String
  updateStatus       String               @default("success")
  Transaction        Transaction[]        @relation("BotOnTransaction")
  TransactionArchive TransactionArchive[] @relation("BotOnTransactionArchive")
}

model Game {
  userid   String
  user     User   @relation("UserOnGame", fields: [userid], references: [id])
  gamename String

  @@id([userid, gamename])
}

model Rep {
  userid     String
  user       User      @relation("UserOnRep", fields: [userid], references: [id])
  rep        Int
  serverid   String
  locked     Boolean   @default(false)
  unlocktime DateTime?

  @@id([userid, serverid])
  @@unique([userid, serverid])
}

model Transaction {
  id         String      @id @default(uuid())
  serverid   String
  Bot        Bot         @relation("BotOnTransaction", fields: [serverid], references: [serverid])
  senderid   String
  sender     User        @relation("SendUserOnTransaction", fields: [senderid], references: [id])
  receiverid String?
  receiver   User?       @relation("ReceiveUserOnTransaction", fields: [receiverid], references: [id])
  actionid   String
  action     Action      @relation("ActionOnTransaction", fields: [actionid], references: [id])
  time       DateTime    @default(now())
  Parameter  Parameter[] @relation("TransactionOnParameter")
}

model Parameter {
  transactionid  String
  transaction    Transaction @relation("TransactionOnParameter", fields: [transactionid], references: [id])
  parametername  String
  parametervalue String

  @@id([transactionid, parametername])
}

model TransactionArchive {
  id         String             @id @default(uuid())
  serverid   String
  Bot        Bot                @relation("BotOnTransactionArchive", fields: [serverid], references: [serverid])
  senderid   String
  sender     User               @relation("SendUserOnTransactionArchive", fields: [senderid], references: [id])
  receiverid String?
  receiver   User?              @relation("ReceiveUserOnTransactionArchive", fields: [receiverid], references: [id])
  actionid   String
  action     Action             @relation("ActionOnTransactionArchive", fields: [actionid], references: [id])
  time       DateTime           @default(now())
  Parameter  ParameterArchive[] @relation("TransactionArchiveOnParameter")
}

model ParameterArchive {
  transactionid  String
  transaction    TransactionArchive @relation("TransactionArchiveOnParameter", fields: [transactionid], references: [id])
  parametername  String
  parametervalue String

  @@id([transactionid, parametername])
}

model Tags {
  userid   String
  user     User   @relation("UserOnTag", fields: [userid], references: [id])
  tagname  String
  tagvalue String

  @@id([userid, tagname])
}

model Session {
  id           String   @id @default(uuid())
  userid       String
  User         User     @relation("UserOnSession", fields: [userid], references: [id])
  token        String   @unique
  loggedintime DateTime @default(now())
  expiration   DateTime
  ip           String
}

model SessionArchive {
  id           String   @id @default(uuid())
  userid       String
  User         User     @relation("UserOnSessionArchive", fields: [userid], references: [id])
  token        String
  loggedintime DateTime @default(now())
  expiration   DateTime
  ip           String
}
